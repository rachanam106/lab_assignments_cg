#include <GL/glut.h>
#include <iostream>

// Function prototypes
void display();
void floodFill(int x, int y, float fillColor[3], float oldColor[3]);
void boundaryFill(int x, int y, float fillColor[3], float borderColor[3]);
void processMenu(int option);
void mouse(int button, int state, int x, int y);
void keyboard(unsigned char key, int x, int y);

// Global variables
int width = 800;
int height = 600;
int polyX[] = { 100, 200, 300, 400 };
int polyY[] = { 100, 300, 200, 400 };
float fillColor[3];
float borderColor[3];

void init() {
    glClearColor(1, 1, 1, 1);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, width, 0, height);
}

void drawPolygon() {
    glColor3f(0, 0, 0);
    glBegin(GL_POLYGON);
    for (int i = 0; i < 4; ++i) {
        glVertex2i(polyX[i], polyY[i]);
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
    glFlush();
}

void floodFill(int x, int y, float fillColor[3], float oldColor[3]) {
    float currentColor[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, currentColor);
    if (currentColor[0] != oldColor[0] || currentColor[1] != oldColor[1] || currentColor[2] != oldColor[2]) {
        return;
    }
    glColor3fv(fillColor);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();

    floodFill(x + 1, y, fillColor, oldColor);
    floodFill(x - 1, y, fillColor, oldColor);
    floodFill(x, y + 1, fillColor, oldColor);
    floodFill(x, y - 1, fillColor, oldColor);
}

void boundaryFill(int x, int y, float fillColor[3], float borderColor[3]) {
    float currentColor[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, currentColor);
    if (currentColor[0] == borderColor[0] && currentColor[1] == borderColor[1] && currentColor[2] == borderColor[2]) {
        return;
    }
    if (currentColor[0] != fillColor[0] || currentColor[1] != fillColor[1] || currentColor[2] != fillColor[2]) {
        glColor3fv(fillColor);
        glBegin(GL_POINTS);
        glVertex2i(x, y);
        glEnd();
        glFlush();

        boundaryFill(x + 1, y, fillColor, borderColor);
        boundaryFill(x - 1, y, fillColor, borderColor);
        boundaryFill(x, y + 1, fillColor, borderColor);
        boundaryFill(x, y - 1, fillColor, borderColor);
    }
}

void processMenu(int option) {
    int seedX, seedY;
    switch (option) {
    case 1: // Flood Fill
        std::cout << "Enter seed point (x y): ";
        std::cin >> seedX >> seedY;
        fillColor[0] = 1; fillColor[1] = 0; fillColor[2] = 0; // Red color
        boundaryFill(seedX, height - seedY, fillColor, fillColor);
        break;
    case 2: // Boundary Fill
        std::cout << "Enter seed point (x y): ";
        std::cin >> seedX >> seedY;
        fillColor[0] = 0; fillColor[1] = 0; fillColor[2] = 1; // Blue color
        boundaryFill(seedX, height - seedY, fillColor, fillColor);
        break;
    }
    glutPostRedisplay();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        fillColor[0] = 1; fillColor[1] = 0; fillColor[2] = 0; // Red color
        boundaryFill(x, height - y, fillColor, fillColor);
        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 'b' || key == 'B') { // Boundary Fill
        fillColor[0] = 0; fillColor[1] = 0; fillColor[2] = 1; // Blue color
        boundaryFill(x, height - y, fillColor, fillColor);
        glutPostRedisplay();
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(width, height);
    glutCreateWindow("Polygon Fill");
    init();

    // Create menu
    glutCreateMenu(processMenu);
    glutAddMenuEntry("Flood Fill (Menu)", 1);
    glutAddMenuEntry("Boundary Fill (Menu)", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON); // Right click to open menu

    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
